===============================================
  Unble Budget App Koyeb 배포 문제 분석 보고서
===============================================

작성일: 2025-08-02
소요시간: 약 하루 (24시간)
최종 해결: JVM 옵션 수정 + 인스턴스 업그레이드

===============================================
1. 근본 원인 분석
===============================================

🚨 핵심 문제: 256MB 인스턴스로는 Spring Boot 3.x 운영 불가능

메모리 요구사항 vs 실제 제공량:
┌─────────────────────┬─────────────┬─────────────┐
│      구분           │   필요량    │   제공량    │
├─────────────────────┼─────────────┼─────────────┤
│ OS + 컨테이너       │    50-70MB  │    50-70MB  │
│ JVM Heap            │   120-150MB │    60-120MB │
│ Metaspace           │    80-120MB │    32-80MB  │
│ Direct Memory       │    20-30MB  │    10-20MB  │
├─────────────────────┼─────────────┼─────────────┤
│ 총 필요량           │   270-370MB │   152-290MB │
│ 인스턴스 총 메모리  │      ?      │    256MB    │
└─────────────────────┴─────────────┴─────────────┘

❌ 결론: 256MB < 270MB (최소 요구량) → 메모리 부족 확실

===============================================
2. 시간순 문제 발생 과정
===============================================

🕐 1단계: OOM(Out of Memory) 에러 발생
─────────────────────────────────────────
증상:
- java.lang.OutOfMemoryError: Metaspace
- Exception in thread "Catalina-utility-1954"
- Spring Boot 컨텍스트 초기화 실패

원인: Spring Boot 클래스 로딩을 위한 Metaspace 공간 부족

시도한 해결책:
- Heap 메모리: 128MB → 100MB → 80MB → 64MB
- Metaspace: 64MB → 48MB → 40MB → 32MB
- Tomcat 스레드: 50 → 10 → 5개

결과: 여전히 OOM 발생 (근본적 메모리 부족)

🕑 2단계: Docker 이미지 에러
─────────────────────────────────────────
증상:
- docker.io/library/openjdk:17-jre-slim: not found
- docker.io/library/maven:3.8.6-openjdk-17-slim: not found

원인: 존재하지 않는 Docker 이미지 태그 사용

해결책: eclipse-temurin 이미지로 변경
- FROM maven:3.9-eclipse-temurin-17-alpine
- FROM eclipse-temurin:17-jre-alpine

🕒 3단계: 컴파일 에러 (WebSocket)
─────────────────────────────────────────
증상:
- package org.springframework.web.socket.config.annotation does not exist
- method does not override or implement a method from a supertype

원인: WebSocket 의존성 없이 WebSocket 설정 클래스 생성

해결책: 불필요한 WebSocketDisableConfig.java 파일 삭제

🕓 4단계: JVM 옵션 호환성 에러
─────────────────────────────────────────
증상:
- Unrecognized VM option 'UseCGroupMemoryLimitForHeap'
- Error: Could not create the Java Virtual Machine

원인: Java 8 전용 옵션을 Java 17에서 사용

해결책: 호환되지 않는 JVM 옵션 제거
- 제거: -XX:+UseCGroupMemoryLimitForHeap
- 제거: -XX:+UnlockExperimentalVMOptions

===============================================
3. 왜 이렇게 오래 걸렸나?
===============================================

❌ 잘못된 접근 방식들:

1. 메모리를 무작정 줄이기만 함
   - 근본 문제(메모리 부족) 해결 대신 임시방편 시도
   - Spring Boot 3.x 최소 요구사항 무시

2. 복잡한 최적화에만 매달림
   - WebSocket 비활성화
   - Lazy initialization 적용
   - Auto-configuration 제외
   → 기본적인 메모리 부족을 최적화로 해결하려 함

3. 인스턴스 크기 업그레이드 회피
   - 256MB 고집하며 무리한 최적화 지속
   - 현실적 해결책(하드웨어 업그레이드) 외면

4. 단계별 검증 부족
   - 여러 변경사항을 한 번에 적용
   - 각 단계별 효과 측정 없음

===============================================
4. 올바른 해결 과정 (15분이면 충분했던 작업)
===============================================

✅ 1단계: 메모리 요구사항 분석 (5분)
─────────────────────────────────────────
Spring Boot 3.x + JPA + PostgreSQL 최소 요구사항:
- JVM Heap: 150-200MB
- Metaspace: 100-150MB
- Direct Memory: 20-30MB
- OS 오버헤드: 50-70MB
- 총 필요: 320-450MB

✅ 2단계: 인스턴스 크기 결정 (2분)
─────────────────────────────────────────
256MB < 320MB (최소 요구량)
→ 최소 512MB 인스턴스 필요 판단

✅ 3단계: 적절한 JVM 설정 (3분)
─────────────────────────────────────────
CMD ["java", 
     "-Xmx200m", 
     "-XX:MaxMetaspaceSize=128m", 
     "-XX:+UseSerialGC",
     "-jar", "app.jar", 
     "--spring.profiles.active=prod"]

✅ 4단계: 배포 및 확인 (5분)
─────────────────────────────────────────
- Git 커밋 & 푸시
- Koyeb 자동 배포 대기
- 정상 동작 확인

💡 총 소요시간: 15분 (실제: 24시간)

===============================================
5. 기술적 문제별 상세 분석
===============================================

🔍 OOM 문제 분석:
─────────────────────────────────────────
Spring Boot 3.x 메모리 사용 패턴:
- 시작 시 대량의 클래스 로딩 (Metaspace 사용)
- JPA 엔티티 메타데이터 (추가 Metaspace)
- Hibernate 초기화 (Heap + Metaspace)
- PostgreSQL 드라이버 로딩 (Metaspace)

256MB 인스턴스에서의 실제 할당:
- Heap: 64-120MB (부족)
- Metaspace: 32-80MB (부족)
- 나머지: OS + Container → 메모리 경합 발생

🔍 Docker 이미지 문제:
─────────────────────────────────────────
사용한 잘못된 이미지:
- openjdk:17-jre-slim (존재하지 않음)
- maven:3.8.6-openjdk-17-slim (존재하지 않음)

올바른 이미지:
- eclipse-temurin:17-jre-alpine (공식, 안정적)
- maven:3.9-eclipse-temurin-17-alpine (최신, 호환)

🔍 JVM 옵션 호환성:
─────────────────────────────────────────
Java 버전별 옵션 지원:
┌────────────────────────────────┬─────────┬─────────┐
│            JVM 옵션            │ Java 8  │ Java 17 │
├────────────────────────────────┼─────────┼─────────┤
│ -XX:+UseCGroupMemoryLimitForHeap │   ✅    │   ❌    │
│ -XX:+UseContainerSupport        │   ❌    │   ✅    │
│ -XX:MaxRAMPercentage           │   ✅    │   ✅    │
└────────────────────────────────┴─────────┴─────────┘

===============================================
6. 최종 해결 설정
===============================================

🎯 성공한 최종 구성:

Dockerfile:
```
FROM maven:3.9-eclipse-temurin-17-alpine AS builder
WORKDIR /app
COPY pom.xml .
RUN mvn dependency:go-offline -B
COPY src/ src/
RUN mvn clean package -DskipTests
RUN cp target/*.jar app.jar

FROM eclipse-temurin:17-jre-alpine
COPY --from=builder /app/app.jar /app.jar
EXPOSE 8080
CMD ["java", 
     "-Xmx200m", 
     "-Xms100m", 
     "-XX:+UseSerialGC", 
     "-XX:MaxMetaspaceSize=128m", 
     "-XX:+UseContainerSupport", 
     "-jar", "app.jar", 
     "--spring.profiles.active=prod"]
```

JVM 메모리 할당 (512MB 인스턴스 기준):
- Heap: 200MB
- Metaspace: 128MB  
- Direct Memory: ~30MB
- OS + Container: ~100MB
- 여유 공간: ~54MB

===============================================
7. 교훈 및 개선사항
===============================================

📚 기술적 교훈:

1. 요구사항 우선 분석
   - 애플리케이션 메모리 요구사항 사전 파악
   - 기술 스택별 최소 요구 리소스 확인
   - 인프라 제약사항과 기술 요구사항 매칭

2. 단순한 해결책 우선 고려
   - 복잡한 최적화 < 하드웨어 업그레이드
   - 기술 부채 < 비즈니스 요구사항
   - 개발 시간 < 운영 안정성

3. 호환성 사전 검증
   - JVM 옵션 버전별 지원 확인
   - Docker 이미지 존재 여부 확인
   - 의존성 버전 호환성 검토

📋 프로세스 개선사항:

1. 단계별 접근법 적용
   - 한 번에 하나의 문제만 해결
   - 각 단계별 효과 측정 및 검증
   - 롤백 포인트 명확히 설정

2. 근본 원인 우선 해결
   - 증상 완화 < 원인 제거
   - 임시방편 < 근본적 해결
   - 최적화 < 기본 요구사항 충족

3. 현실적 제약사항 인정
   - 기술적 한계 vs 비즈니스 요구사항
   - 개발 시간 vs 인프라 비용
   - 완벽한 최적화 vs 적당한 안정성

===============================================
8. 비용 분석
===============================================

💰 실제 비용:

개발 시간: 24시간 × 시간당 비용
인스턴스 업그레이드: 256MB → 512MB (월 $5-10 증가 예상)

올바른 접근 시 비용: 15분 × 시간당 비용

🎯 결론: 처음부터 올바른 접근했다면 
시간 비용 96% 절약 + 빠른 서비스 런칭

===============================================
9. 향후 배포 가이드라인
===============================================

✅ Spring Boot 3.x 배포 체크리스트:

□ 메모리 요구사항 분석
  - Heap: 최소 150MB 이상
  - Metaspace: 최소 100MB 이상
  - 총 메모리: 최소 400MB 이상

□ 인스턴스 사양 결정
  - 개발: 512MB 이상
  - 운영: 1GB 이상 권장

□ JVM 옵션 검증
  - Java 버전별 호환성 확인
  - 컨테이너 환경 최적화 옵션 적용

□ Docker 이미지 검증
  - 공식 이미지 사용 (eclipse-temurin 권장)
  - 이미지 존재 여부 사전 확인

□ 단계별 배포
  - 기본 설정으로 1차 배포 시도
  - 정상 동작 확인 후 최적화 진행

===============================================
최종 정리
===============================================

🎯 핵심 메시지:
"256MB로 Spring Boot 3.x 운영은 불가능. 
 512MB 이상 인스턴스로 시작했다면 15분 만에 해결됐을 문제"

📈 성과:
- 최종적으로 안정적인 배포 환경 구축
- 다양한 배포 문제 해결 경험 축적
- 메모리 최적화 및 JVM 튜닝 노하우 습득

🔄 다음 액션:
- 인스턴스 모니터링 및 성능 최적화
- 로드 테스트를 통한 안정성 검증
- CI/CD 파이프라인 자동화

작성자: Claude Code Assistant
검토일: 2025-08-02
문서버전: 1.0