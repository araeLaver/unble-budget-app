-- ================================================================
-- Unble Budget App - Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
-- ================================================================

-- Í∏∞Î≥∏ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇΩÏûÖ (ÏãúÏä§ÌÖú Í∏∞Î≥∏ - user_idÎäî NULL)
INSERT INTO categories (name, color, icon, category_type, is_default, sort_order) VALUES

-- ÏûêÏÇ∞ Í¥ÄÎ¶¨ Ïπ¥ÌÖåÍ≥†Î¶¨
('ÌòÑÍ∏à', '#2ECC71', 'üí∞', 'ASSET', true, 1),
('ÏùÄÌñâÏòàÍ∏à', '#3498DB', 'üè¶', 'ASSET', true, 2),
('Ï†ÅÍ∏à', '#9B59B6', 'üíé', 'ASSET', true, 3),
('Ìà¨Ïûê', '#E67E22', 'üìà', 'ASSET', true, 4),
('Ïπ¥ÎìúÏûîÏï°', '#E74C3C', 'üí≥', 'ASSET', true, 5),

-- ÏßÄÏ∂ú Ïπ¥ÌÖåÍ≥†Î¶¨
('ÏãùÎπÑ', '#FF6B6B', 'üçΩÔ∏è', 'EXPENSE', true, 10),
('ÍµêÌÜµÎπÑ', '#4ECDC4', 'üöó', 'EXPENSE', true, 11),
('ÏÉùÌôúÏö©Ìíà', '#45B7D1', 'üõí', 'EXPENSE', true, 12),
('ÏùòÎ£åÎπÑ', '#96CEB4', 'üè•', 'EXPENSE', true, 13),
('Î¨∏Ìôî/Ïó¨Í∞Ä', '#FFEAA7', 'üé¨', 'EXPENSE', true, 14),
('Ï£ºÍ±∞ÎπÑ', '#FF7675', 'üè†', 'EXPENSE', true, 15),
('ÍµêÏú°ÎπÑ', '#6C5CE7', 'üìö', 'EXPENSE', true, 16),
('ÏùòÎ•ò/ÎØ∏Ïö©', '#FD79A8', 'üëï', 'EXPENSE', true, 17),
('ÌÜµÏã†ÎπÑ', '#00B894', 'üì±', 'EXPENSE', true, 18),
('Í≥µÍ≥ºÍ∏à', '#FDCB6E', '‚ö°', 'EXPENSE', true, 19),
('Î≥¥ÌóòÎ£å', '#A29BFE', 'üõ°Ô∏è', 'EXPENSE', true, 20),
('ÏÑ∏Í∏à', '#636E72', 'üèõÔ∏è', 'EXPENSE', true, 21),

-- ÏàòÏûÖ Ïπ¥ÌÖåÍ≥†Î¶¨
('Í∏âÏó¨', '#27AE60', 'üíº', 'INCOME', true, 30),
('Ïö©Îèà', '#E17055', 'üíµ', 'INCOME', true, 31),
('Ìà¨ÏûêÏàòÏùµ', '#00B894', 'üìä', 'INCOME', true, 32),
('ÏÑ†Î¨º/Î≥¥ÎÑàÏä§', '#FD79A8', 'üéÅ', 'INCOME', true, 33),
('Î∂ÄÏóÖÏÜåÎìù', '#6C5CE7', 'üí∞', 'INCOME', true, 34),
('Ïù¥ÏûêÏàòÏùµ', '#00CEC9', 'üíπ', 'INCOME', true, 35),

-- Í∏∞ÌÉÄ
('Í∏∞ÌÉÄ', '#DDA0DD', 'üìù', 'EXPENSE', true, 99)

ON CONFLICT (name, category_type, is_default) WHERE is_default = true DO NOTHING;

-- ================================================================
-- ÏÉòÌîå ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ (Í∞úÎ∞úÏö© - Ïö¥ÏòÅÏóêÏÑúÎäî Ï†úÍ±∞)
-- ================================================================

-- ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê 1
INSERT INTO users (email, password, name) VALUES 
('test@unble.com', '$2a$10$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z2EuHsVpNMzM.ppmhVIHhOGG', 'ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê')
ON CONFLICT (email) DO NOTHING;

-- ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï
INSERT INTO user_settings (user_id, currency, theme) 
SELECT u.id, 'KRW', 'light' 
FROM users u 
WHERE u.email = 'test@unble.com'
ON CONFLICT (user_id) DO NOTHING;

-- ================================================================
-- Ïú†Ïö©Ìïú Ìï®ÏàòÎì§
-- ================================================================

-- ÏÇ¨Ïö©ÏûêÎ≥Ñ ÏõîÍ∞Ñ ÌÜµÍ≥Ñ Ìï®Ïàò
CREATE OR REPLACE FUNCTION get_monthly_stats(p_user_id BIGINT, p_year INT, p_month INT)
RETURNS TABLE (
    total_income DECIMAL(15,2),
    total_expense DECIMAL(15,2),
    net_amount DECIMAL(15,2),
    transaction_count BIGINT
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COALESCE(SUM(CASE WHEN t.transaction_type = 'INCOME' THEN t.amount ELSE 0 END), 0) as total_income,
        COALESCE(SUM(CASE WHEN t.transaction_type = 'EXPENSE' THEN t.amount ELSE 0 END), 0) as total_expense,
        COALESCE(SUM(CASE WHEN t.transaction_type = 'INCOME' THEN t.amount ELSE -t.amount END), 0) as net_amount,
        COUNT(*) as transaction_count
    FROM transactions t
    WHERE t.user_id = p_user_id
    AND EXTRACT(YEAR FROM t.transaction_date) = p_year
    AND EXTRACT(MONTH FROM t.transaction_date) = p_month;
END;
$$ LANGUAGE plpgsql;

-- Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏßÄÏ∂ú ÎπÑÏú® Ìï®Ïàò
CREATE OR REPLACE FUNCTION get_expense_breakdown(p_user_id BIGINT, p_start_date DATE, p_end_date DATE)
RETURNS TABLE (
    category_name VARCHAR(100),
    category_icon VARCHAR(50),
    category_color VARCHAR(7),
    total_amount DECIMAL(15,2),
    percentage DECIMAL(5,2)
) AS $$
BEGIN
    RETURN QUERY
    WITH total_expense AS (
        SELECT SUM(amount) as total
        FROM transactions 
        WHERE user_id = p_user_id 
        AND transaction_type = 'EXPENSE'
        AND transaction_date BETWEEN p_start_date AND p_end_date
    )
    SELECT 
        c.name as category_name,
        c.icon as category_icon,
        c.color as category_color,
        SUM(t.amount) as total_amount,
        ROUND((SUM(t.amount) * 100.0 / te.total), 2) as percentage
    FROM transactions t
    JOIN categories c ON t.category_id = c.id
    CROSS JOIN total_expense te
    WHERE t.user_id = p_user_id
    AND t.transaction_type = 'EXPENSE'
    AND t.transaction_date BETWEEN p_start_date AND p_end_date
    GROUP BY c.id, c.name, c.icon, c.color, te.total
    ORDER BY total_amount DESC;
END;
$$ LANGUAGE plpgsql;

-- ================================================================
-- Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± Í≤ÄÏ¶ù ÏøºÎ¶¨
-- ================================================================

-- Ï§ëÎ≥µ Ïù¥Î©îÏùº Í≤ÄÏ¶ù
CREATE OR REPLACE FUNCTION check_duplicate_emails()
RETURNS TABLE (email VARCHAR(255), count_duplicate BIGINT) AS $$
BEGIN
    RETURN QUERY
    SELECT u.email, COUNT(*) as count_duplicate
    FROM users u
    GROUP BY u.email
    HAVING COUNT(*) > 1;
END;
$$ LANGUAGE plpgsql;

-- Í≥†ÏïÑ Í±∞Îûò Í≤ÄÏ¶ù (Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÏÇ≠Ï†úÎêú Í±∞Îûò)
CREATE OR REPLACE FUNCTION check_orphan_transactions()
RETURNS TABLE (transaction_id BIGINT, user_email VARCHAR(255), amount DECIMAL(15,2)) AS $$
BEGIN
    RETURN QUERY
    SELECT t.id, u.email, t.amount
    FROM transactions t
    JOIN users u ON t.user_id = u.id
    WHERE t.category_id IS NOT NULL 
    AND NOT EXISTS (SELECT 1 FROM categories c WHERE c.id = t.category_id);
END;
$$ LANGUAGE plpgsql;